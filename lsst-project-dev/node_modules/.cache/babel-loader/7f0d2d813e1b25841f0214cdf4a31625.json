{"ast":null,"code":"var _jsxFileName = \"/Users/desiree/Documents/GitHub/callmedeeray.github.io/lsst-project-dev/src/QuestionContainer.js\";\nimport { questions } from './questions.json';\nimport React, { Component } from 'react';\nimport ShortAnswer from './ShortAnswer';\nimport LongAnswer from './LongAnswer';\nimport FillBlank from './FillBlank';\nimport MultipleChoice from './MultipleChoice';\nimport InlineMultipleChoice from './InlineMultipleChoice';\nimport CompoundFillBlank from './CompoundFillBlank';\n\nclass QuestionContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.makeQuestions = this.makeQuestions.bind(this);\n  }\n\n  makeQuestions() {\n    let qList = [];\n    questions.forEach(function (d) {\n      if (d.type === \"short-answer\") {\n        qList.push(React.createElement(ShortAnswer, {\n          key: d.questionName,\n          info: d,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 20\n          },\n          __self: this\n        }));\n      } else if (d.type === \"long-answer\") {\n        qList.push(React.createElement(LongAnswer, {\n          key: d.questionName,\n          info: d,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23\n          },\n          __self: this\n        }));\n      } else if (d.type === \"multiple-choice\") {\n        qList.push(React.createElement(MultipleChoice, {\n          key: d.questionName,\n          info: d,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 26\n          },\n          __self: this\n        }));\n      } else if (d.type === \"inline-multiple-choice\") {\n        qList.push(React.createElement(InlineMultipleChoice, {\n          key: d.questionName,\n          info: d,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 29\n          },\n          __self: this\n        }));\n      } else if (d.type === \"fill-in-the-blank\") {\n        qList.push(React.createElement(FillBlank, {\n          key: d.questionName,\n          info: d,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 32\n          },\n          __self: this\n        }));\n      } else if (d.type === \"compound-fill-in-the-blank\") {\n        qList.push(React.createElement(CompoundFillBlank, {\n          key: d.questionName,\n          info: d,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }));\n      }\n    });\n    return qList;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"qas\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, this.makeQuestions());\n  }\n\n}\n\nexport default QuestionContainer;","map":{"version":3,"sources":["/Users/desiree/Documents/GitHub/callmedeeray.github.io/lsst-project-dev/src/QuestionContainer.js"],"names":["questions","React","Component","ShortAnswer","LongAnswer","FillBlank","MultipleChoice","InlineMultipleChoice","CompoundFillBlank","QuestionContainer","constructor","props","makeQuestions","bind","qList","forEach","d","type","push","questionName","render"],"mappings":";AAAA,SAASA,SAAT,QAA0B,kBAA1B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,oBAAP,MAAiC,wBAAjC;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;;AAEA,MAAMC,iBAAN,SAAgCP,SAAhC,CAA0C;AACzCQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AAClB,UAAMA,KAAN;AACA,SAAKC,aAAL,GAAqB,KAAKA,aAAL,CAAmBC,IAAnB,CAAwB,IAAxB,CAArB;AACA;;AAEDD,EAAAA,aAAa,GAAG;AACf,QAAIE,KAAK,GAAG,EAAZ;AACAd,IAAAA,SAAS,CAACe,OAAV,CAAkB,UAASC,CAAT,EAAY;AAC7B,UAAIA,CAAC,CAACC,IAAF,KAAW,cAAf,EAA+B;AAC9BH,QAAAA,KAAK,CAACI,IAAN,CAAW,oBAAC,WAAD;AAAa,UAAA,GAAG,EAAEF,CAAC,CAACG,YAApB;AAAkC,UAAA,IAAI,EAAEH,CAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAX;AACA,OAFD,MAGK,IAAIA,CAAC,CAACC,IAAF,KAAW,aAAf,EAA8B;AAClCH,QAAAA,KAAK,CAACI,IAAN,CAAW,oBAAC,UAAD;AAAY,UAAA,GAAG,EAAEF,CAAC,CAACG,YAAnB;AAAiC,UAAA,IAAI,EAAEH,CAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAX;AACA,OAFI,MAGA,IAAIA,CAAC,CAACC,IAAF,KAAW,iBAAf,EAAkC;AACtCH,QAAAA,KAAK,CAACI,IAAN,CAAW,oBAAC,cAAD;AAAgB,UAAA,GAAG,EAAEF,CAAC,CAACG,YAAvB;AAAqC,UAAA,IAAI,EAAEH,CAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAX;AACA,OAFI,MAGA,IAAIA,CAAC,CAACC,IAAF,KAAW,wBAAf,EAAyC;AAC7CH,QAAAA,KAAK,CAACI,IAAN,CAAW,oBAAC,oBAAD;AAAsB,UAAA,GAAG,EAAEF,CAAC,CAACG,YAA7B;AAA2C,UAAA,IAAI,EAAEH,CAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAX;AACA,OAFI,MAGA,IAAIA,CAAC,CAACC,IAAF,KAAW,mBAAf,EAAoC;AACxCH,QAAAA,KAAK,CAACI,IAAN,CAAW,oBAAC,SAAD;AAAW,UAAA,GAAG,EAAEF,CAAC,CAACG,YAAlB;AAAgC,UAAA,IAAI,EAAEH,CAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAX;AACA,OAFI,MAGA,IAAIA,CAAC,CAACC,IAAF,KAAW,4BAAf,EAA6C;AACjDH,QAAAA,KAAK,CAACI,IAAN,CAAW,oBAAC,iBAAD;AAAmB,UAAA,GAAG,EAAEF,CAAC,CAACG,YAA1B;AAAwC,UAAA,IAAI,EAAEH,CAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAX;AACA;AACD,KAnBD;AAoBA,WAAOF,KAAP;AACA;;AAEDM,EAAAA,MAAM,GAAI;AACT,WAAO;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsB,KAAKR,aAAL,EAAtB,CAAP;AACA;;AAjCwC;;AAqC1C,eAAeH,iBAAf","sourcesContent":["import { questions } from './questions.json';\nimport React, { Component } from 'react';\nimport ShortAnswer from './ShortAnswer';\nimport LongAnswer from './LongAnswer';\nimport FillBlank from './FillBlank';\nimport MultipleChoice from './MultipleChoice';\nimport InlineMultipleChoice from './InlineMultipleChoice';\nimport CompoundFillBlank from './CompoundFillBlank';\n\nclass QuestionContainer extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.makeQuestions = this.makeQuestions.bind(this);\n\t}\n\n\tmakeQuestions() {\n\t\tlet qList = [];\n\t\tquestions.forEach(function(d) {\n\t\t\tif (d.type === \"short-answer\") {\n\t\t\t\tqList.push(<ShortAnswer key={d.questionName} info={d} />)\n\t\t\t}\n\t\t\telse if (d.type === \"long-answer\") {\n\t\t\t\tqList.push(<LongAnswer key={d.questionName} info={d} />)\n\t\t\t}\n\t\t\telse if (d.type === \"multiple-choice\") {\n\t\t\t\tqList.push(<MultipleChoice key={d.questionName} info={d} />)\n\t\t\t}\n\t\t\telse if (d.type === \"inline-multiple-choice\") {\n\t\t\t\tqList.push(<InlineMultipleChoice key={d.questionName} info={d} />)\n\t\t\t}\n\t\t\telse if (d.type === \"fill-in-the-blank\") {\n\t\t\t\tqList.push(<FillBlank key={d.questionName} info={d} />)\n\t\t\t}\n\t\t\telse if (d.type === \"compound-fill-in-the-blank\") {\n\t\t\t\tqList.push(<CompoundFillBlank key={d.questionName} info={d} />)\n\t\t\t}\n\t\t})\n\t\treturn qList;\n\t}\n\n\trender () {\n\t\treturn <div className=\"qas\">{this.makeQuestions()}</div>\n\t}\n}\n\n\nexport default QuestionContainer;"]},"metadata":{},"sourceType":"module"}